// Time: O(n^2)
// Space: O(n)
class Solution {
    class DSU {
        int n;
        int[] size;
        int[] id;
        int[] affected; // # of initially affected nodes
        
        public DSU(int _n) {
            this.n = _n;
            size = new int[n];
            id = new int[n];
            affected = new int[n];
            
            for (int i = 0; i < n; i++) {
                size[i] = 1;
                id[i] = i;
            }
        }
        
        public int find(int x) {
            int root = x;
            while (id[root] != root) {
                root = id[root];
            }
            
            while (x != root) {
                int next = id[x];
                id[x] = root;
                x = next;
            }
            
            return root;
        }
        
        public void union(int x, int y) {
            int rootx = find(x);
            int rooty = find(y);
            
            if (rootx == rooty) return;
            
            if (size[rootx] < size[rooty]) {
                id[rootx] = rooty;
                size[rooty] += size[rootx];
            } else {
                id[rooty] = rootx;
                size[rootx] += size[rooty];
            }
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        Arrays.sort(initial);
        
        // initial dsu
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        
        // count affected
        for (int p: initial) {
            dsu.affected[dsu.find(p)]++;
        }
        
        int num = 0;
        int ans = -1;
        for (int p:initial) {
            int root = dsu.find(p);
            if (dsu.size[root] > num && dsu.affected[root] == 1) {
                num = dsu.size[root];
                ans = p;
            }
        }
        
        return ans == -1 ? initial[0] : ans;
    }
}
