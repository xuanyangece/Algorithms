class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> answer = new LinkedList();
        if (nums == null || nums.length == 0) return answer;
        Arrays.sort(nums);
        
        backtrack(answer, new LinkedList(), nums, new boolean[nums.length]);
        return answer;
    }
    
    private void backtrack(List answer, List temp, int[] nums, boolean[] used) {
        if (temp.size() == nums.length) answer.add(new LinkedList(temp));
        else {
            for (int i = 0; i < nums.length; i++) {
                if (used[i] || i > 0 && nums[i] == nums[i-1] && !used[i-1]) continue;
                used[i] = true;
                temp.add(nums[i]);
                backtrack(answer, temp, nums, used);
                used[i] = false;
                temp.remove(temp.size() - 1);
            }
        }
    }
}

