class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> answer = new LinkedList<>();
        if (s == null || s.length() == 0) return answer;
        
        backtrack(answer, new ArrayList<String>(), 0, s);
        return answer;
    }
    
    private void backtrack(List answer, List temp, int start, String s) {
        if (start == s.length()) {
            answer.add(new ArrayList(temp));
        } else {
            for (int i = start; i < s.length(); i++) {
                String subString = s.substring(start, i + 1);
                if (!isPalindrome(subString)) continue;
                temp.add(subString);
                backtrack(answer, temp, i + 1, s);
                temp.remove(temp.size() - 1);
            }
        }
    }
    
    private boolean isPalindrome(String s) {
        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s.charAt(i) == s.charAt(j)) continue;
            return false;
        }
        return true;
    }
}
