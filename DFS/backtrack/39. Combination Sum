class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> answer = new LinkedList();
        if (candidates == null || candidates.length == 0) return answer;
        
        backtrack(answer, new ArrayList<Integer>(), 0, target, candidates);
        return answer;
    }
    
    private void backtrack(List answer, List temp, int start, int target, int[] candidates) {
        if (getSum(temp) == target) {
            answer.add(new ArrayList(temp));
        } else {
            for (int i = start; i < candidates.length; i++) {
                if (getSum(temp) > target - candidates[i]) continue;
                temp.add(candidates[i]);
                backtrack(answer, temp, i, target, candidates);     // i not i + 1
                temp.remove(temp.size() - 1);
            }
        }
    }
    
    private int getSum(List temp) {
        Iterator itr = temp.iterator();
        int sum = 0;
        while (itr.hasNext()) {
            sum += (int)itr.next();
        }
        return sum;
    }
}
