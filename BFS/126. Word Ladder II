class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        
        // convert list to set
        Set<String> dict = new HashSet();
        for (String word: wordList) {
            dict.add(word);
        }
        dict.add(beginWord);
        dict.add(endWord);
        
        // initialize ladder and map
        List<List<String>> ladders = new ArrayList();
        HashMap<String, List<String>> map = new HashMap();
        HashMap<String, Integer> distance = new HashMap();      // shorest distance of every node to end node
        
        if (wordList == null || !wordList.contains(endWord)) return ladders;
        
        bfs(map, distance, beginWord, endWord, dict);
         List<String> path = new ArrayList<String>();
        dfs(ladders, path, endWord, beginWord, distance, map);
        
        return ladders;
    }
    
    private void bfs(Map<String, List<String>> map, Map<String, Integer> distance,
            String start, String end, Set<String> dict) {
        Queue<String> queue = new LinkedList();
        queue.offer(start);
        distance.put(start, 0);
        for (String word: dict) {
            map.put(word, new ArrayList());
        }
        
        // update distance and map
        while (!queue.isEmpty()) {
            String curt = queue.poll();
            
            List<String> nextWords = getNextWords(curt, dict);
            for (String nextWord: nextWords) {
                map.get(nextWord).add(curt);
                if (!distance.containsKey(nextWord)) {
                    distance.put(nextWord, distance.get(curt) + 1);
                    queue.offer(nextWord);
                }
            }
        }
    }
    
    private void dfs(List<List<String>> ladders, List<String> path, String curt,
            String start, Map<String, Integer> distance,
            Map<String, List<String>> map) {
        path.add(curt);
        if (curt.equals(start)) {
            Collections.reverse(path);
            ladders.add(new ArrayList<String>(path));
            Collections.reverse(path);
        } else {
            for (String next: map.get(curt)) {
                if (distance.get(curt) == distance.get(next) + 1) {       // == condition means in the shortest path
                    dfs(ladders, path, next, start, distance, map);
                }
            }
        }
        path.remove(path.size() - 1); 
    }
    
    private List<String> getNextWords(String crt, Set<String> dict) {
        List<String> expansion = new ArrayList<String>();

        for (int i = 0; i < crt.length(); i++) {
            for (char ch = 'a'; ch <= 'z'; ch++) {
                if (ch != crt.charAt(i)) {
                    String expanded = crt.substring(0, i) + ch
                            + crt.substring(i + 1);
                    if (dict.contains(expanded)) {
                        expansion.add(expanded);
                    }
                }
            }
        }

        return expansion;
    }
}
