/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    private int getLength(ListNode head) {
        int length = 0;
        while (head != null) {
            head = head.next;
            length++;
        }
        return length;
    }
    
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) {
            return head;
        }
        
        int length = getLength(head);
        k = k % length;
        if (k == 0) return head;
        
        // dummy to record
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        for (int i = 0; i < k; i ++) {
            if (fast == null) return null;
            fast = fast.next;
        }
        // corner case?
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        
        // update head
        dummy.next = slow.next;
        // n-1 -> null
        slow.next = null;
        // end -> start
        fast.next = head;
        
        return dummy.next;
    }
}
