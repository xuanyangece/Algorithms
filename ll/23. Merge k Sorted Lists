/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        
        return helper(lists, 0, lists.length - 1);
    }

    // divide and conquer
    private ListNode helper(ListNode[] lists, int start, int end) {
        // base case
        if (start >= end) return lists[start];
        
        // divide 
        int mid = start + (end - start) / 2;
        ListNode left = helper(lists, start, mid);
        ListNode right = helper(lists, mid + 1, end);
            
        // conquer
        return merge2Lists(left, right);
    }

    private ListNode merge2Lists(ListNode left, ListNode right){
        // dummy
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
        // merge
        while (left != null && right != null) {
            if (left.val < right.val) {
                tail.next = left;
                left = left.next;
            } else {
                tail.next = right;
                right = right.next;
            }
            tail = tail.next;
        }
        if (left != null) {
            tail.next = left;
        } else if (right != null) {
            tail.next = right;
        }
        
        // end
        return dummy.next;
    }
}


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    private Comparator<ListNode> lnComparator = new Comparator<ListNode>() {
        public int compare(ListNode l1, ListNode l2) {
            if (l1 == null) return 1;
            else if (l2 == null) return -1;
            return l1.val - l2.val;
        }
    };
    
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        
        // initial heap
        Queue<ListNode> heap = new PriorityQueue<ListNode>(lists.length, lnComparator);
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null) {
                heap.add(lists[i]);
            }
        }
        
        // dummy & tail to track information
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
        // compare and put in
        while (!heap.isEmpty()) {
            ListNode head = heap.poll();
            tail.next = head;
            tail = head;
            if (head.next != null) heap.add(head.next);
        }
        
        // end
        return dummy.next;
    }
}
