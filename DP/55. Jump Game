// Greedy
class Solution {
    public boolean canJump(int[] nums) {
        int i = 0, reach = 0;
        for ( ; i <= reach && i < nums.length; i++) {
            reach = Math.max(reach, i + nums[i]);
        }
        return i == nums.length;
    }
}

// DP
class Solution {
    public boolean canJump(int[] nums) {
        if (nums == null || nums.length == 0) return false;
        
        boolean[] can = new boolean[nums.length];
        can[0] = true;
        
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (can[j] && nums[j] + j >= i) {
                    can[i] = true;
                    break;
                }
            }
        }
        
        return can[nums.length-1];
    }
}
