class Solution {
    private boolean isPalindrome(String s, int start, int end) {
        if (s == null) {
            return false;
        }
        for (int i = start, j = end; i < j; i++, j--) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
        }
        return true;
    }
    
    // another DP
    private boolean[][] getIsPalindrome(String s) {
        boolean isPal[][] = new boolean[s.length()][s.length()];
        
        // length == 1
        for (int i = 0; i < s.length(); i++) {
            isPal[i][i] = true;
        }
        
        // length == 2
        for (int i = 0; i < s.length() - 1; i++) {
            isPal[i][i+1] = (s.charAt(i) == s.charAt(i+1));
        }
            
        // length > 2, isPal[i][j] = isPal[i+1][j-1] && s[i] == s[j]
        for (int length = 2; length < s.length(); length++) {
            for (int i = 0; i + length < s.length(); i++) {
                isPal[i][i+length] = isPal[i+1][i+length-1] && s.charAt(i) == s.charAt(i+length);
            }
        }
        
        return isPal;
    }
    
    public int minCut(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        // state
        int minCut[] = new int[s.length() + 1];
        
        // preparation
        boolean allPalindrome[][] = getIsPalindrome(s);
        
        // initialize
        for (int i = 0; i < minCut.length; i++) {
            minCut[i] = i - 1;  
        }
        
        // function
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (allPalindrome[j][i-1]) {
                    minCut[i] = Math.min(minCut[i], minCut[j] + 1);
                }
            }
        }
        
        // end
        return minCut[s.length()];
    }
}
