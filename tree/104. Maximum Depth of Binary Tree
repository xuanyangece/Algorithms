// 1. Recursion

class Solution {
    public int maxDepth(TreeNode root) {
         if (root == null) return 0;
        
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

// 2. Traverse

class Solution {
    private int max;
    
    public int maxDepth(TreeNode root) {
        max = 0;
        helper(root, 1);
        return max;
    }
    
    private void helper(TreeNode curt, int depth) {
        if (curt == null) return;
        max = Math.max(depth, max);
        helper(curt.left, depth+1);
        helper(curt.right, depth+1);
    }
}

3. D&C

class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        
        return Math.max(left, right) + 1;
    }
}
