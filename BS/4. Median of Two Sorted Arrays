class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null) return Integer.MIN_VALUE;
        
        int length = nums1.length + nums2.length;
        if (length % 2 == 0) {
            return (findKth(nums1, 0, nums2, 0, length / 2) + findKth(nums1, 0, nums2, 0, length / 2 + 1)) / 2;
        } else {
            return findKth(nums1, 0, nums2, 0, length / 2 + 1);
        }
    }
    
    private double findKth(int nums1[], int A_start, int nums2[], int B_start, int k) {
        // 3个参数， 3个极端情况退出
        if (A_start >= nums1.length) {
            return nums2[B_start + k - 1];
        }
        if (B_start >= nums2.length) {
            return nums1[A_start + k - 1];
        }
        
        if (k == 1) return Math.min(nums1[A_start], nums2[B_start]);
        
        int A_key = A_start + k/2 - 1 < nums1.length
            ? nums1[A_start + k/2 - 1]
            : Integer.MAX_VALUE;
        
        int B_key = B_start + k/2 - 1 < nums2.length
            ? nums2[B_start + k/2 - 1]
            : Integer.MAX_VALUE;
        
        if (A_key > B_key) {
            return findKth(nums1, A_start, nums2, B_start + k/2, k - k/2);
        } else {
            return findKth(nums1, A_start + k/2, nums2, B_start, k - k/2);
        }
    }
}
